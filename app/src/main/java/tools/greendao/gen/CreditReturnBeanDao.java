package tools.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android.develop.ct7liang.tools.bean.CreditReturnBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CREDIT_RETURN_BEAN".
*/
public class CreditReturnBeanDao extends AbstractDao<CreditReturnBean, Long> {

    public static final String TABLENAME = "CREDIT_RETURN_BEAN";

    /**
     * Properties of entity CreditReturnBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tag = new Property(1, Long.class, "tag", false, "TAG");
        public final static Property ReturnDate = new Property(2, String.class, "returnDate", false, "RETURN_DATE");
        public final static Property ReturnRecycle = new Property(3, String.class, "returnRecycle", false, "RETURN_RECYCLE");
        public final static Property ReturnEndDay = new Property(4, String.class, "returnEndDay", false, "RETURN_END_DAY");
    }


    public CreditReturnBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CreditReturnBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CREDIT_RETURN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TAG\" INTEGER NOT NULL ," + // 1: tag
                "\"RETURN_DATE\" TEXT NOT NULL ," + // 2: returnDate
                "\"RETURN_RECYCLE\" TEXT NOT NULL ," + // 3: returnRecycle
                "\"RETURN_END_DAY\" TEXT NOT NULL );"); // 4: returnEndDay
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CREDIT_RETURN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CreditReturnBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTag());
        stmt.bindString(3, entity.getReturnDate());
        stmt.bindString(4, entity.getReturnRecycle());
        stmt.bindString(5, entity.getReturnEndDay());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CreditReturnBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTag());
        stmt.bindString(3, entity.getReturnDate());
        stmt.bindString(4, entity.getReturnRecycle());
        stmt.bindString(5, entity.getReturnEndDay());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CreditReturnBean readEntity(Cursor cursor, int offset) {
        CreditReturnBean entity = new CreditReturnBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // tag
            cursor.getString(offset + 2), // returnDate
            cursor.getString(offset + 3), // returnRecycle
            cursor.getString(offset + 4) // returnEndDay
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CreditReturnBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTag(cursor.getLong(offset + 1));
        entity.setReturnDate(cursor.getString(offset + 2));
        entity.setReturnRecycle(cursor.getString(offset + 3));
        entity.setReturnEndDay(cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CreditReturnBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CreditReturnBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CreditReturnBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
