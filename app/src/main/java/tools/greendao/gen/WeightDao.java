package tools.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android.develop.ct7liang.tools.bean.Weight;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEIGHT".
*/
public class WeightDao extends AbstractDao<Weight, Long> {

    public static final String TABLENAME = "WEIGHT";

    /**
     * Properties of entity Weight.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, long.class, "time", false, "TIME");
        public final static Property TimeFormat = new Property(2, String.class, "timeFormat", false, "TIME_FORMAT");
        public final static Property Year = new Property(3, String.class, "year", false, "YEAR");
        public final static Property Month = new Property(4, String.class, "month", false, "MONTH");
        public final static Property Date = new Property(5, String.class, "date", false, "DATE");
        public final static Property Value = new Property(6, float.class, "value", false, "VALUE");
    }


    public WeightDao(DaoConfig config) {
        super(config);
    }
    
    public WeightDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEIGHT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIME\" INTEGER NOT NULL ," + // 1: time
                "\"TIME_FORMAT\" TEXT NOT NULL ," + // 2: timeFormat
                "\"YEAR\" TEXT NOT NULL ," + // 3: year
                "\"MONTH\" TEXT NOT NULL ," + // 4: month
                "\"DATE\" TEXT NOT NULL ," + // 5: date
                "\"VALUE\" REAL NOT NULL );"); // 6: value
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEIGHT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Weight entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTime());
        stmt.bindString(3, entity.getTimeFormat());
        stmt.bindString(4, entity.getYear());
        stmt.bindString(5, entity.getMonth());
        stmt.bindString(6, entity.getDate());
        stmt.bindDouble(7, entity.getValue());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Weight entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTime());
        stmt.bindString(3, entity.getTimeFormat());
        stmt.bindString(4, entity.getYear());
        stmt.bindString(5, entity.getMonth());
        stmt.bindString(6, entity.getDate());
        stmt.bindDouble(7, entity.getValue());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Weight readEntity(Cursor cursor, int offset) {
        Weight entity = new Weight( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // time
            cursor.getString(offset + 2), // timeFormat
            cursor.getString(offset + 3), // year
            cursor.getString(offset + 4), // month
            cursor.getString(offset + 5), // date
            cursor.getFloat(offset + 6) // value
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Weight entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.getLong(offset + 1));
        entity.setTimeFormat(cursor.getString(offset + 2));
        entity.setYear(cursor.getString(offset + 3));
        entity.setMonth(cursor.getString(offset + 4));
        entity.setDate(cursor.getString(offset + 5));
        entity.setValue(cursor.getFloat(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Weight entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Weight entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Weight entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
