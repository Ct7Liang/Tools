package tools.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android.develop.ct7liang.tools.bean.CreditCardBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CREDIT_CARD_BEAN".
*/
public class CreditCardBeanDao extends AbstractDao<CreditCardBean, Long> {

    public static final String TABLENAME = "CREDIT_CARD_BEAN";

    /**
     * Properties of entity CreditCardBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tag = new Property(1, int.class, "tag", false, "TAG");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property CardNum = new Property(3, String.class, "cardNum", false, "CARD_NUM");
        public final static Property StartDay = new Property(4, int.class, "startDay", false, "START_DAY");
        public final static Property EndDay = new Property(5, int.class, "endDay", false, "END_DAY");
        public final static Property ReturnDay = new Property(6, int.class, "returnDay", false, "RETURN_DAY");
        public final static Property CardYear = new Property(7, int.class, "cardYear", false, "CARD_YEAR");
        public final static Property CardMonth = new Property(8, int.class, "cardMonth", false, "CARD_MONTH");
    }


    public CreditCardBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CreditCardBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CREDIT_CARD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TAG\" INTEGER NOT NULL ," + // 1: tag
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"CARD_NUM\" TEXT NOT NULL ," + // 3: cardNum
                "\"START_DAY\" INTEGER NOT NULL ," + // 4: startDay
                "\"END_DAY\" INTEGER NOT NULL ," + // 5: endDay
                "\"RETURN_DAY\" INTEGER NOT NULL ," + // 6: returnDay
                "\"CARD_YEAR\" INTEGER NOT NULL ," + // 7: cardYear
                "\"CARD_MONTH\" INTEGER NOT NULL );"); // 8: cardMonth
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CREDIT_CARD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CreditCardBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTag());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getCardNum());
        stmt.bindLong(5, entity.getStartDay());
        stmt.bindLong(6, entity.getEndDay());
        stmt.bindLong(7, entity.getReturnDay());
        stmt.bindLong(8, entity.getCardYear());
        stmt.bindLong(9, entity.getCardMonth());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CreditCardBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTag());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getCardNum());
        stmt.bindLong(5, entity.getStartDay());
        stmt.bindLong(6, entity.getEndDay());
        stmt.bindLong(7, entity.getReturnDay());
        stmt.bindLong(8, entity.getCardYear());
        stmt.bindLong(9, entity.getCardMonth());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CreditCardBean readEntity(Cursor cursor, int offset) {
        CreditCardBean entity = new CreditCardBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // tag
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // cardNum
            cursor.getInt(offset + 4), // startDay
            cursor.getInt(offset + 5), // endDay
            cursor.getInt(offset + 6), // returnDay
            cursor.getInt(offset + 7), // cardYear
            cursor.getInt(offset + 8) // cardMonth
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CreditCardBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTag(cursor.getInt(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setCardNum(cursor.getString(offset + 3));
        entity.setStartDay(cursor.getInt(offset + 4));
        entity.setEndDay(cursor.getInt(offset + 5));
        entity.setReturnDay(cursor.getInt(offset + 6));
        entity.setCardYear(cursor.getInt(offset + 7));
        entity.setCardMonth(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CreditCardBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CreditCardBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CreditCardBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
