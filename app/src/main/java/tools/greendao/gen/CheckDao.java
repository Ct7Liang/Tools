package tools.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android.develop.ct7liang.tools.bean.Check;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK".
*/
public class CheckDao extends AbstractDao<Check, Long> {

    public static final String TABLENAME = "CHECK";

    /**
     * Properties of entity Check.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Year = new Property(1, int.class, "year", false, "YEAR");
        public final static Property Month = new Property(2, int.class, "month", false, "MONTH");
        public final static Property Date = new Property(3, int.class, "date", false, "DATE");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property Cash = new Property(5, float.class, "cash", false, "CASH");
        public final static Property Desc = new Property(6, String.class, "desc", false, "DESC");
        public final static Property Time = new Property(7, String.class, "time", false, "TIME");
    }


    public CheckDao(DaoConfig config) {
        super(config);
    }
    
    public CheckDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"YEAR\" INTEGER NOT NULL ," + // 1: year
                "\"MONTH\" INTEGER NOT NULL ," + // 2: month
                "\"DATE\" INTEGER NOT NULL ," + // 3: date
                "\"TYPE\" INTEGER NOT NULL ," + // 4: type
                "\"CASH\" REAL NOT NULL ," + // 5: cash
                "\"DESC\" TEXT NOT NULL ," + // 6: desc
                "\"TIME\" TEXT NOT NULL );"); // 7: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Check entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getYear());
        stmt.bindLong(3, entity.getMonth());
        stmt.bindLong(4, entity.getDate());
        stmt.bindLong(5, entity.getType());
        stmt.bindDouble(6, entity.getCash());
        stmt.bindString(7, entity.getDesc());
        stmt.bindString(8, entity.getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Check entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getYear());
        stmt.bindLong(3, entity.getMonth());
        stmt.bindLong(4, entity.getDate());
        stmt.bindLong(5, entity.getType());
        stmt.bindDouble(6, entity.getCash());
        stmt.bindString(7, entity.getDesc());
        stmt.bindString(8, entity.getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Check readEntity(Cursor cursor, int offset) {
        Check entity = new Check( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // year
            cursor.getInt(offset + 2), // month
            cursor.getInt(offset + 3), // date
            cursor.getInt(offset + 4), // type
            cursor.getFloat(offset + 5), // cash
            cursor.getString(offset + 6), // desc
            cursor.getString(offset + 7) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Check entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setYear(cursor.getInt(offset + 1));
        entity.setMonth(cursor.getInt(offset + 2));
        entity.setDate(cursor.getInt(offset + 3));
        entity.setType(cursor.getInt(offset + 4));
        entity.setCash(cursor.getFloat(offset + 5));
        entity.setDesc(cursor.getString(offset + 6));
        entity.setTime(cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Check entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Check entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Check entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
